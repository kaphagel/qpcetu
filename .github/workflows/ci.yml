# Professional CI/CD Pipeline for Qt5 Industrial HMI Application
# Step 6: Continuous Integration & Quality Assurance

name: Professional CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  QT_VERSION: 5.15.2
  CMAKE_BUILD_TYPE: Release

jobs:
  # Job 1: Code Quality Analysis
  quality-analysis:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        
    - name: 🔧 Setup Qt5
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        modules: qtbase qtsvg qtwidgets qtnetwork qttest
        
    - name: 📊 Install Analysis Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy valgrind lcov libmodbus-dev
        
    - name: 🔍 Static Analysis (cppcheck)
      run: |
        mkdir -p reports
        cppcheck --enable=all --xml --xml-version=2 src/ 2> reports/cppcheck-report.xml || true
        
    - name: 🧹 Clang-Tidy Analysis
      run: |
        find src/ -name "*.cpp" -exec clang-tidy {} -- -I/usr/include/qt5 -I/usr/include/qt5/QtCore -I/usr/include/qt5/QtWidgets \; > reports/clang-tidy-report.txt 2>&1 || true
        
    - name: 📤 Upload Analysis Reports
      uses: actions/upload-artifact@v3
      with:
        name: code-analysis-reports
        path: reports/

  # Job 2: Linux Build and Test
  linux-build:
    name: 🐧 Linux Build & Test
    runs-on: ubuntu-latest
    needs: quality-analysis
    
    strategy:
      matrix:
        build-type: [Debug, Release]
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: 🔧 Setup Qt5
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        modules: qtbase qtsvg qtwidgets qtnetwork qttest
        
    - name: 📦 Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libmodbus-dev lcov
        
    - name: 🏗️ Professional Build Script
      run: |
        chmod +x scripts/build-linux.sh
        ./scripts/build-linux.sh
        
    - name: 🧪 Run Professional Test Suite
      run: |
        chmod +x scripts/run-tests.sh
        ./scripts/run-tests.sh --coverage --xml-output
        
    - name: 📊 Generate Coverage Report
      if: matrix.build-type == 'Debug'
      run: |
        cd build-linux-x64
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/tests/*' '*/mxe-lite/*' --output-file coverage_filtered.info
        genhtml coverage_filtered.info --output-directory coverage_html
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux-build-${{ matrix.build-type }}
        path: |
          build-linux-x64/bin/
          build-linux-x64/coverage_html/
          
    - name: 📤 Upload Coverage to Codecov
      if: matrix.build-type == 'Debug'
      uses: codecov/codecov-action@v3
      with:
        file: build-linux-x64/coverage_filtered.info
        flags: unittests
        name: qt5-industrial-hmi

  # Job 3: Windows Cross-Compilation Build
  windows-build:
    name: 🪟 Windows Cross-Compilation
    runs-on: ubuntu-latest
    needs: quality-analysis
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: 📦 Install MXE Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf automake autopoint bash bison bzip2 cmake flex \
          g++ g++-multilib gettext git gperf intltool libc6-dev-i386 \
          libgdk-pixbuf2.0-dev libltdl-dev libssl-dev libtool-bin \
          libxml-parser-perl lzip make openssl p7zip-full patch \
          perl pkg-config python3 ruby sed unzip wget xz-utils
          
    - name: 🔧 Cache MXE Toolchain
      uses: actions/cache@v3
      id: mxe-cache
      with:
        path: deps/toolchain/mxe-lite
        key: mxe-qt5-${{ hashFiles('deps/toolchain/mxe-lite/Makefile') }}
        
    - name: 🏗️ Build MXE Toolchain
      if: steps.mxe-cache.outputs.cache-hit != 'true'
      timeout-minutes: 120
      run: |
        cd deps/toolchain/mxe-lite
        make MXE_TARGETS='x86_64-w64-mingw32.static' qtbase qtsvg qtwidgets qtnetwork
        
    - name: 🔨 Professional Windows Build
      run: |
        chmod +x scripts/build-windows.sh
        ./scripts/build-windows.sh
        
    - name: 🔍 Verify Windows Executable
      run: |
        file build-windows-x64/bin/ModernSciFiHMI.exe
        ls -la build-windows-x64/bin/ModernSciFiHMI.exe
        
    - name: 📤 Upload Windows Binary
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: build-windows-x64/bin/ModernSciFiHMI.exe

  # Job 4: Security Scanning
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: quality-analysis
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🛡️ Run Semgrep Security Analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/cpp
          p/default
      continue-on-error: true

  # Job 5: Documentation Generation
  documentation:
    name: 📚 Documentation Generation
    runs-on: ubuntu-latest
    needs: linux-build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Install Documentation Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        
    - name: 📖 Generate API Documentation
      run: |
        mkdir -p docs/api/html
        echo "# API Documentation" > docs/api/html/index.html
        echo "Professional Qt5 Industrial HMI API documentation will be generated here." >> docs/api/html/index.html
        
    - name: 📤 Upload Documentation
      uses: actions/upload-artifact@v3
      with:
        name: api-documentation
        path: docs/api/html/

  # Job 6: Integration Testing
  integration-test:
    name: 🔗 Integration Testing
    runs-on: ubuntu-latest
    needs: linux-build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: 🔧 Setup Qt5
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        modules: qtbase qtsvg qtwidgets qtnetwork qttest
        
    - name: 📦 Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libmodbus-dev
        
    - name: 🏗️ Build Integration Tests
      run: |
        mkdir -p build-integration
        cd build-integration
        cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_INTEGRATION_TESTS=ON ..
        make -j$(nproc)
        
    - name: 🧪 Run Integration Tests
      run: |
        cd build-integration
        chmod +x ../scripts/run-tests.sh
        ../scripts/run-tests.sh --integration --timeout=300
        
    - name: 📤 Upload Integration Results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: build-integration/

  # Job 7: Performance Validation
  performance-test:
    name: ⚡ Performance Validation
    runs-on: ubuntu-latest
    needs: linux-build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: 🔧 Setup Qt5
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        modules: qtbase qtsvg qtwidgets qtnetwork qttest
        
    - name: 📦 Install Performance Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libmodbus-dev valgrind
        
    - name: 🚀 Run Performance Tests
      run: |
        chmod +x scripts/run-tests.sh
        timeout 300 ./scripts/run-tests.sh --performance || true
        
    - name: 🔍 Memory Leak Detection
      run: |
        cd build-linux-x64
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
                 --track-origins=yes --xml=yes --xml-file=valgrind-report.xml \
                 ./bin/ModernSciFiHMI --version 2>/dev/null || true
                 
    - name: 📤 Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: build-linux-x64/valgrind-report.xml

  # Job 8: Release Preparation
  release-preparation:
    name: 🚀 Release Preparation
    runs-on: ubuntu-latest
    needs: [linux-build, windows-build, integration-test, performance-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Download Linux Build
      uses: actions/download-artifact@v3
      with:
        name: linux-build-Release
        path: ./release/linux/
        
    - name: 📥 Download Windows Build
      uses: actions/download-artifact@v3
      with:
        name: windows-executable
        path: ./release/windows/
        
    - name: 📦 Create Release Package
      run: |
        cd release
        tar -czf ModernSciFiHMI-linux-x64.tar.gz linux/
        zip -r ModernSciFiHMI-windows-x64.zip windows/
        
    - name: 📤 Upload Release Packages
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: release/*.{tar.gz,zip}