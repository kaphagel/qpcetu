/****************************************************************************
** Meta object code from reading C++ file 'test_industrialcontroller.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'test_industrialcontroller.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestIndustrialController_t {
    QByteArrayData data[33];
    char stringdata0[657];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestIndustrialController_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestIndustrialController_t qt_meta_stringdata_TestIndustrialController = {
    {
QT_MOC_LITERAL(0, 0, 24), // "TestIndustrialController"
QT_MOC_LITERAL(1, 25, 12), // "initTestCase"
QT_MOC_LITERAL(2, 38, 0), // ""
QT_MOC_LITERAL(3, 39, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 55, 4), // "init"
QT_MOC_LITERAL(5, 60, 7), // "cleanup"
QT_MOC_LITERAL(6, 68, 16), // "testInitialState"
QT_MOC_LITERAL(7, 85, 20), // "testStateTransitions"
QT_MOC_LITERAL(8, 106, 27), // "testInvalidStateTransitions"
QT_MOC_LITERAL(9, 134, 26), // "testStateTransitionSignals"
QT_MOC_LITERAL(10, 161, 27), // "testConnectionEstablishment"
QT_MOC_LITERAL(11, 189, 21), // "testConnectionFailure"
QT_MOC_LITERAL(12, 211, 21), // "testConnectionTimeout"
QT_MOC_LITERAL(13, 233, 21), // "testReconnectionLogic"
QT_MOC_LITERAL(14, 255, 18), // "testDataValidation"
QT_MOC_LITERAL(15, 274, 15), // "testDataParsing"
QT_MOC_LITERAL(16, 290, 23), // "testInvalidDataHandling"
QT_MOC_LITERAL(17, 314, 18), // "testDataTimestamps"
QT_MOC_LITERAL(18, 333, 17), // "testErrorRecovery"
QT_MOC_LITERAL(19, 351, 18), // "testMultipleErrors"
QT_MOC_LITERAL(20, 370, 25), // "testErrorStatePersistence"
QT_MOC_LITERAL(21, 396, 23), // "testErrorSignalEmission"
QT_MOC_LITERAL(22, 420, 22), // "testHeartbeatMechanism"
QT_MOC_LITERAL(23, 443, 21), // "testCommandProcessing"
QT_MOC_LITERAL(24, 465, 20), // "testResponseHandling"
QT_MOC_LITERAL(25, 486, 32), // "testProtocolVersionCompatibility"
QT_MOC_LITERAL(26, 519, 18), // "testDataThroughput"
QT_MOC_LITERAL(27, 538, 20), // "testMemoryManagement"
QT_MOC_LITERAL(28, 559, 24), // "testConcurrentOperations"
QT_MOC_LITERAL(29, 584, 12), // "testNullData"
QT_MOC_LITERAL(30, 597, 18), // "testEmptyResponses"
QT_MOC_LITERAL(31, 616, 17), // "testMalformedData"
QT_MOC_LITERAL(32, 634, 22) // "testResourceExhaustion"

    },
    "TestIndustrialController\0initTestCase\0"
    "\0cleanupTestCase\0init\0cleanup\0"
    "testInitialState\0testStateTransitions\0"
    "testInvalidStateTransitions\0"
    "testStateTransitionSignals\0"
    "testConnectionEstablishment\0"
    "testConnectionFailure\0testConnectionTimeout\0"
    "testReconnectionLogic\0testDataValidation\0"
    "testDataParsing\0testInvalidDataHandling\0"
    "testDataTimestamps\0testErrorRecovery\0"
    "testMultipleErrors\0testErrorStatePersistence\0"
    "testErrorSignalEmission\0testHeartbeatMechanism\0"
    "testCommandProcessing\0testResponseHandling\0"
    "testProtocolVersionCompatibility\0"
    "testDataThroughput\0testMemoryManagement\0"
    "testConcurrentOperations\0testNullData\0"
    "testEmptyResponses\0testMalformedData\0"
    "testResourceExhaustion"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestIndustrialController[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      31,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  169,    2, 0x08 /* Private */,
       3,    0,  170,    2, 0x08 /* Private */,
       4,    0,  171,    2, 0x08 /* Private */,
       5,    0,  172,    2, 0x08 /* Private */,
       6,    0,  173,    2, 0x08 /* Private */,
       7,    0,  174,    2, 0x08 /* Private */,
       8,    0,  175,    2, 0x08 /* Private */,
       9,    0,  176,    2, 0x08 /* Private */,
      10,    0,  177,    2, 0x08 /* Private */,
      11,    0,  178,    2, 0x08 /* Private */,
      12,    0,  179,    2, 0x08 /* Private */,
      13,    0,  180,    2, 0x08 /* Private */,
      14,    0,  181,    2, 0x08 /* Private */,
      15,    0,  182,    2, 0x08 /* Private */,
      16,    0,  183,    2, 0x08 /* Private */,
      17,    0,  184,    2, 0x08 /* Private */,
      18,    0,  185,    2, 0x08 /* Private */,
      19,    0,  186,    2, 0x08 /* Private */,
      20,    0,  187,    2, 0x08 /* Private */,
      21,    0,  188,    2, 0x08 /* Private */,
      22,    0,  189,    2, 0x08 /* Private */,
      23,    0,  190,    2, 0x08 /* Private */,
      24,    0,  191,    2, 0x08 /* Private */,
      25,    0,  192,    2, 0x08 /* Private */,
      26,    0,  193,    2, 0x08 /* Private */,
      27,    0,  194,    2, 0x08 /* Private */,
      28,    0,  195,    2, 0x08 /* Private */,
      29,    0,  196,    2, 0x08 /* Private */,
      30,    0,  197,    2, 0x08 /* Private */,
      31,    0,  198,    2, 0x08 /* Private */,
      32,    0,  199,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestIndustrialController::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestIndustrialController *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->testInitialState(); break;
        case 5: _t->testStateTransitions(); break;
        case 6: _t->testInvalidStateTransitions(); break;
        case 7: _t->testStateTransitionSignals(); break;
        case 8: _t->testConnectionEstablishment(); break;
        case 9: _t->testConnectionFailure(); break;
        case 10: _t->testConnectionTimeout(); break;
        case 11: _t->testReconnectionLogic(); break;
        case 12: _t->testDataValidation(); break;
        case 13: _t->testDataParsing(); break;
        case 14: _t->testInvalidDataHandling(); break;
        case 15: _t->testDataTimestamps(); break;
        case 16: _t->testErrorRecovery(); break;
        case 17: _t->testMultipleErrors(); break;
        case 18: _t->testErrorStatePersistence(); break;
        case 19: _t->testErrorSignalEmission(); break;
        case 20: _t->testHeartbeatMechanism(); break;
        case 21: _t->testCommandProcessing(); break;
        case 22: _t->testResponseHandling(); break;
        case 23: _t->testProtocolVersionCompatibility(); break;
        case 24: _t->testDataThroughput(); break;
        case 25: _t->testMemoryManagement(); break;
        case 26: _t->testConcurrentOperations(); break;
        case 27: _t->testNullData(); break;
        case 28: _t->testEmptyResponses(); break;
        case 29: _t->testMalformedData(); break;
        case 30: _t->testResourceExhaustion(); break;
        default: ;
        }
    }
    (void)_a;
}

QT_INIT_METAOBJECT const QMetaObject TestIndustrialController::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestIndustrialController.data,
    qt_meta_data_TestIndustrialController,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *TestIndustrialController::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestIndustrialController::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestIndustrialController.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestIndustrialController::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 31)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 31;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 31)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 31;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
