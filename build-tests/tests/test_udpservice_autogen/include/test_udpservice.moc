/****************************************************************************
** Meta object code from reading C++ file 'test_udpservice.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'test_udpservice.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestUdpService_t {
    QByteArrayData data[20];
    char stringdata0[368];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestUdpService_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestUdpService_t qt_meta_stringdata_TestUdpService = {
    {
QT_MOC_LITERAL(0, 0, 14), // "TestUdpService"
QT_MOC_LITERAL(1, 15, 12), // "initTestCase"
QT_MOC_LITERAL(2, 28, 0), // ""
QT_MOC_LITERAL(3, 29, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 45, 4), // "init"
QT_MOC_LITERAL(5, 50, 7), // "cleanup"
QT_MOC_LITERAL(6, 58, 22), // "testListeningStartStop"
QT_MOC_LITERAL(7, 81, 20), // "testBroadcastSending"
QT_MOC_LITERAL(8, 102, 21), // "testResponseReceiving"
QT_MOC_LITERAL(9, 124, 21), // "testMultipleResponses"
QT_MOC_LITERAL(10, 146, 23), // "testControllerDiscovery"
QT_MOC_LITERAL(11, 170, 19), // "testProtocolParsing"
QT_MOC_LITERAL(12, 190, 20), // "testInvalidResponses"
QT_MOC_LITERAL(13, 211, 19), // "testTimeoutHandling"
QT_MOC_LITERAL(14, 231, 18), // "testNetworkFailure"
QT_MOC_LITERAL(15, 250, 17), // "testPortConflicts"
QT_MOC_LITERAL(16, 268, 20), // "testPermissionErrors"
QT_MOC_LITERAL(17, 289, 27), // "testHighFrequencyBroadcasts"
QT_MOC_LITERAL(18, 317, 25), // "testLargeResponseHandling"
QT_MOC_LITERAL(19, 343, 24) // "testConcurrentOperations"

    },
    "TestUdpService\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0"
    "testListeningStartStop\0testBroadcastSending\0"
    "testResponseReceiving\0testMultipleResponses\0"
    "testControllerDiscovery\0testProtocolParsing\0"
    "testInvalidResponses\0testTimeoutHandling\0"
    "testNetworkFailure\0testPortConflicts\0"
    "testPermissionErrors\0testHighFrequencyBroadcasts\0"
    "testLargeResponseHandling\0"
    "testConcurrentOperations"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestUdpService[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      18,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  104,    2, 0x08 /* Private */,
       3,    0,  105,    2, 0x08 /* Private */,
       4,    0,  106,    2, 0x08 /* Private */,
       5,    0,  107,    2, 0x08 /* Private */,
       6,    0,  108,    2, 0x08 /* Private */,
       7,    0,  109,    2, 0x08 /* Private */,
       8,    0,  110,    2, 0x08 /* Private */,
       9,    0,  111,    2, 0x08 /* Private */,
      10,    0,  112,    2, 0x08 /* Private */,
      11,    0,  113,    2, 0x08 /* Private */,
      12,    0,  114,    2, 0x08 /* Private */,
      13,    0,  115,    2, 0x08 /* Private */,
      14,    0,  116,    2, 0x08 /* Private */,
      15,    0,  117,    2, 0x08 /* Private */,
      16,    0,  118,    2, 0x08 /* Private */,
      17,    0,  119,    2, 0x08 /* Private */,
      18,    0,  120,    2, 0x08 /* Private */,
      19,    0,  121,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestUdpService::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestUdpService *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->testListeningStartStop(); break;
        case 5: _t->testBroadcastSending(); break;
        case 6: _t->testResponseReceiving(); break;
        case 7: _t->testMultipleResponses(); break;
        case 8: _t->testControllerDiscovery(); break;
        case 9: _t->testProtocolParsing(); break;
        case 10: _t->testInvalidResponses(); break;
        case 11: _t->testTimeoutHandling(); break;
        case 12: _t->testNetworkFailure(); break;
        case 13: _t->testPortConflicts(); break;
        case 14: _t->testPermissionErrors(); break;
        case 15: _t->testHighFrequencyBroadcasts(); break;
        case 16: _t->testLargeResponseHandling(); break;
        case 17: _t->testConcurrentOperations(); break;
        default: ;
        }
    }
    (void)_a;
}

QT_INIT_METAOBJECT const QMetaObject TestUdpService::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestUdpService.data,
    qt_meta_data_TestUdpService,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *TestUdpService::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestUdpService::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestUdpService.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestUdpService::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 18)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 18;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 18)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 18;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
